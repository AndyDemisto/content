commonfields:
  id: VerifyContext
  version: 1
name: VerifyContext
script: |-
  var path = args.path;
  var fields = args.fields ? args.fields.split(",") : [];
  var expectedValue = args.expectedValue;

  var verifyFields = function(obj) {
      fields.forEach(function(field) {
          if(dq(obj, field) === undefined) {
              throw 'field ' + field + ' is missing from ' + JSON.stringify(obj);
          }
      });
  }

  var contextObject = dq(invContext, path);
  if(contextObject === undefined) {
        throw 'path ' + path + ' is not in context';
  }

  var isArray = contextObject instanceof Array;

  if(isArray) {
      contextObject.forEach(verifyFields);
  } else {
      verifyFields(contextObject);
  }

  if(expectedValue) {
      var value;
      try {
         value = JSON.parse(expectedValue);
      } catch (e) {
          value = expectedValue;
      }
      if(value != contextObject) {
          throw 'context path ' + path + ' is not equal to expected value';
      }
  }
type: javascript
tags:
- context
comment: |+
  Verify path in context
  - Verify path existence
  - If matching object is array - verify fields exists in each object in array
  - If matching object is not array - verify fields exists in matching object
  - if 'expectedValue' supplied - ensure that given value equal to context path

enabled: true
args:
- name: path
  required: true
  default: true
  description: Context path (e.g. 'Incidents')
- name: fields
  description: Comma separated values to verify that are in context(e.g. 'one,two,three')
- name: expectedValue
  description: 'Primitive or JSON expected value of the path context (e.g. ''SomeString'',
    ''{"a": 1, "b": ["hello", "world" ]}'
scripttarget: 0

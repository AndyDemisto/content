commonfields:
  id: ArcSightLoggerGetEvents
  version: -1
name: ArcSightLoggerGetEvents
script: |-
  var searchArgs = {};
  if (args.query) {
      searchArgs.query = args.query;
  }
  if (args.startTime) {
      searchArgs.start_time = args.startTime;
  }
  if (args.endTime) {
      searchArgs.end_time = args.endTime;
  }
  if (args.discoverFields) {
      searchArgs.discover_fields = args.discoverFields;
  }
  if (args.summaryFields) {
      searchArgs.summary_fields = args.summaryFields;
  }
  if (args.fieldSummary) {
      searchArgs.field_summary = args.fieldSummary;
  }
  if (args.localSearch) {
      searchArgs.local_search = args.localSearch;
  }
  if (args.timeout) {
      searchArgs.timeout = args.timeout;
  }
  if (args.lastDays) {
      searchArgs.lastDays = args.lastDays;
  }

  var searchResults = executeCommand('as-search', searchArgs)[0];
  if (searchResults.Type === entryTypes.error) {
      // return the error to the user
      return searchResults;
  }

  var searchSessionId = searchResults.Contents.searchSessionId;
  var sessionId = searchResults.Contents.sessionId;

  // get the status until the status is complete - it means the search query is complete
  var searchStatus;
  do {
      wait(2);
      var statusResults = executeCommand('as-status', {
          searchSessionId: searchSessionId,
          sessionId: sessionId
      })[0];

      if (statusResults.Type === entryTypes.error) {
          // return the error to the user
          return statusResults;
      }

      searchStatus = statusResults.Contents.status;
  } while(searchStatus !== 'complete');

  var eventsArgs = {
      searchSessionId: searchSessionId,
      sessionId: sessionId,
  };
  if (args.dir) {
      eventsArgs.dir = args.dir;
  }
  if (args.fields) {
      eventsArgs.fields = args.fields;
  }
  if (args.length) {
      eventsArgs.length = args.length;
  }
  var eventsResult = executeCommand('as-events', eventsArgs)[0];
  if (eventsResult.Type === eventsResult.error) {
      // return the error to the user
      return eventsResult;
  }

  var closeSessionResult = executeCommand('as-close', {
      searchSessionId: searchSessionId,
      sessionId: sessionId
  })[0];

  if (closeSessionResult.Type === entryTypes.error) {
      return closeSessionResult;
  }

  // return the events
  return eventsResult;
type: javascript
tags: []
enabled: true
args:
- name: query
  description: The search query string to filter/process the events.
- name: startTime
  description: 'The date and time string for the start time in the search time range.
    If start_ time is provided, end_time must be present as well. 
    Format: 
    - InPDT:2014-05-26T21:49:46.000-07:00
    - InUTC:2014-05-26T21:49:46.000Z
    '
- name: endTime
  description: 'The date and time string for the end time in the search time range.
    If end_ time is provided, start_time must be present as well. See Integration
    tips for correct date/time format.
    Format: 
    - InPDT:2014-05-26T21:49:46.000-07:00
    - InUTC:2014-05-26T21:49:46.000Z
    '
- name: discoverFields
  description: Indicates that the search should try to discover fields in the events
    found.
- name: summaryFields
  description: Comma separated list of fields. To be used to calculate summary when
    field_summary is true.
- name: fieldSummary
  auto: PREDEFINED
  predefined:
  - "true"
  - "false"
  description: Indicates to use the field summary.
- name: localSearch
  auto: PREDEFINED
  predefined:
  - "true"
  - "false"
  description: Indicates the search is local only, and does not include peers.
- name: timeout
  description: The number of milliseconds to keep the search after processing has
    stopped. Default timeout is 10 minutes.
  defaultValue: "120000"
- name: lastDays
  description: 'The number of days from from current time . Use to limit the search
    time range. '
- name: dir
  description: The sort direction based on event time. forward/backward (default is
    forward).
- name: fields
  description: The list of fields in the order to show. If not specified, all fields
    will be used
- name: length
  description: The length or number of events to retrieve. Maximum number is 10000.
- name: offset
  description: The offset from the first even
scripttarget: 0
releaseNotes: "-"

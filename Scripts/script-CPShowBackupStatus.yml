commonfields:
  id: CPShowBackupStatus
  version: -1
name: CPShowBackupStatus
deprecated : true
script: |
  from re import escape
  CLI_SHOW = 'show backup status'
  BASH_SHOW = '/etc/cli.sh -c "' + CLI_SHOW + '"'
  CLI_ADD = "add backup local"
  BASH_ADD = '/etc/cli.sh -c "' + CLI_ADD + '"'
  keepPolling = True
  res = []
  tbl = []
  devices = demisto.get(demisto.args(), 'devices')
  devicesBackupStarted = []
  devicesBackupError = []
  if not devices:
      res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Received empty device list!"})
  else:
      devices = ','.join(devices) if isinstance(devices, list) else devices
      sshArgs = {"using": devices,
               "cmd": BASH_SHOW
               }
      while keepPolling:
          resSSH = demisto.executeCommand("ssh", sshArgs)
          try:
              for entry in resSSH:
                  if isError(entry):
                      res += resSSH
                      break
                  else:
                      device = entry['ModuleName']
                      if demisto.get(entry, 'Contents.success'):
                          devicesBackupStarted.append(device)
                          output = demisto.get(entry, 'Contents.output')
                          result = 'Answer returned'
                      else:
                          devicesBackupError.append(device)
                          output = "Output:\n" + str(demisto.get(entry, 'Contents.output')) + "Error:\n" + str(demisto.get(entry, 'Contents.error'))
                          result = 'Failed to query'

                      tbl.append({'DeviceName': device, 'System': demisto.get(entry, 'Contents.system'), 'Query result': result, 'Output': output })
          except Exception as ex:
              res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                          "Contents": "Error occurred while parsing output from command. Exception info:\n" + str(ex) + "\n\nInvalid output:\n" + str(resSSH)})

      demisto.setContext('chkpbackupstarted', devicesBackupStarted )
      demisto.setContext('devicesbackuperror', devicesBackupError )
      demisto.setContext('backupsreporttext', backupsreporttext )


      res.append({"Type": entryTypes["note"], "ContentsFormat": formats["table"], "Contents": tbl})
  demisto.results(res)
type: python
tags:
- checkpoint
comment: Connect to a checkpoint firewall appliance using SSH and retrieve status
  for backup tasks. The user account being used to access the device must be set to
  use the SSH shell and not the built in Checkpoint CLI. Consult the Checkpoint documentation
  for instructions on how to do this.
system: true
args:
- name: devices
  required: true
  default: true
- name: waittimeout
  description: In seconds. If not provided, does not wait.
scripttarget: 0
dependson:
  must:
  - ssh
timeout: 0s

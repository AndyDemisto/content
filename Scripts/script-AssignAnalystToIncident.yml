commonfields:
  id: AssignAnalystToIncident
  version: -1
name: AssignAnalystToIncident
system: true
script: |-
  from random import choice

  rolesList = []
  if demisto.get(demisto.args(), 'roles'):
      rolesList = argToList(demisto.args()['roles']);

  isRandom = True
  if demisto.get(demisto.args(), 'isRandom'):
      if demisto.args()['isRandom'].lower() == 'no':
          isRandom = False

  res = demisto.executeCommand('getUsers', { 'roles': ','.join(rolesList) });
  usersList = list(map((lambda u: u['username']), res[0]['Contents']))

  userToAssign = None
  if isRandom:
      userToAssign = choice(usersList)
  else:
      usersMap = dict.fromkeys(usersList, 0)
      assignedIncidents = demisto.executeCommand("getIncidents", { 'status': '1' })[0]['Contents']['data']

      for inc in assignedIncidents:
          if inc['owner']:
              usersMap[inc['owner']] += 1

      minVal = min(usersMap.itervalues())
      userToAssign = choice([k for k, v in usersMap.iteritems() if v == minVal])

  if userToAssign is not None:
      demisto.executeCommand("setOwner", {"owner":userToAssign})
      demisto.results('User \'' + userToAssign + '\' assigned to be the incident owner.')
  else:
      demisto.results('No user found.')
type: python
tags:
- Utility
comment: |-
  Assign analyst to incident.
  If isRandom is 'yes' (default) the analyst is picked randomly from the available users, according to the provided roles (if no roles provided, will fetch all users).
  If isRandom is 'no' the less busy analyst will be picked to be the incident owner.
enabled: true
args:
- name: roles
  default: true
  description: The optional list of roles we want to assign users from. Can accept
    arrays or comma separated list. Leave empty to fetch all users.
- name: isRandom
  description: Will pick random user if set to true, otherwise, pick the less busy analyst
scripttarget: 0

commonfields:
  id: Rasterize
  version: -1
name: Rasterize
display: Rasterize
category: Malware analysis
description: Rasterize URLs given to it
detaileddescription: Take a URL and create an image or PDF out of the page
configuration: []
script:
  script: |-
    # The command demisto.command() holds the command sent from the user.
    if demisto.command() == 'test-module':
        # This is the call made when pressing the integration test button.
        demisto.results('ok')
        sys.exit(0)

    if demisto.command() == 'rasterize':
        from subprocess import call
        friendlyName = 'url.png'
        if demisto.get(demisto.args(), 'type') == 'pdf':
            friendlyName = 'url.pdf'
        command = ['phantomjs', '/usr/local/bin/rasterize.js', demisto.args()['url'], friendlyName]
        if demisto.get(demisto.args(), 'width') and demisto.get(demisto.args(), 'height'):
            command.append(demisto.gets(demisto.args(), 'width') + '*' + demisto.gets(demisto.args(), 'height'))
        stat = call(command)
        if stat == 0:
            filename = demisto.uniqueFile()
            call(['mv', friendlyName, demisto.investigation()['id'] + '_' + filename])
            demisto.results({'ContentsFormat': 'text', 'Type': 3, 'File': friendlyName, 'FileID': filename, 'Contents': ''})
        else:
            demisto.results({'ContentsFormat': 'text', 'Type': 4, 'Contents': 'PhantomJS returned - ' + str(stat)})
        sys.exit(0)
    demisto.results({'ContentsFormat': 'text', 'Type': 4, 'Contents': 'Unrecognized command'})
  type: python
  commands:
  - name: rasterize
    arguments:
    - name: url
      required: true
      default: true
      description: The URL to rasterize. Must be full URL including http prefix.
    - name: width
      description: The page width (empty is entire page)
    - name: height
      description: The page height (empty is entire page)
    - name: type
      description: pdf or image. Default is png.
    description: Rasterize a URL into image or PDF
  dockerimage: slavikm/rasterize
